import os
import httpx
import logging
import asyncio
from aiogram import Router, Dispatcher, types, Bot, F
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from pathlib import Path
from dotenv import load_dotenv

current_file_path = Path(__file__)

project_root = current_file_path.parent.parent

env_path = project_root / ".env"

load_dotenv(dotenv_path=env_path)

BOT_TOKEN = os.getenv('BOT_TOKEN')
API_BASE_URL = os.getenv('API_BASE_URL')
users_token = {}


class RegisterStates(StatesGroup):
    waiting_for_username = State()
    waiting_for_password = State()


class LoginStates(StatesGroup):
    waiting_for_username = State()
    waiting_for_password = State()


class CreatePostStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_content = State()


main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'),
            KeyboardButton(text='–í–æ–π—Ç–∏')
        ],
        [
            KeyboardButton(text='–ü–æ—Å—Ç—ã'),
            KeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç')
        ]
    ]
)


def get_inline_kb(post_id: int, current_likes: int):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=f'üëç {current_likes}', callback_data=f'like_{post_id}')
            ]
        ]
    )

    return keyboard


router = Router()


@router.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ç–∫–µ–Ω–¥ –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ FastAPI —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–µ.', reply_markup=main_kb)


@router.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def start_register(message: types.Message, state: FSMContext):

    await message.answer('–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫: ')

    await state.set_state(RegisterStates.waiting_for_username)


@router.message(RegisterStates.waiting_for_username)
async def register_username_handler(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer('–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    
    await state.update_data(username=message.text)

    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞):')

    await state.set_state(RegisterStates.waiting_for_password)


@router.message(RegisterStates.waiting_for_password)
async def register_password_handler(message: types.Message, state: FSMContext):

    if len(message.text) < 3:
        await message.answer('–í–∞—à –ø–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return

    user_data = await state.get_data()
    username = user_data.get('username')
    password = message.text

    register_data = {
        'username': username,
        'password': password
    }

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(f'{API_BASE_URL}/register', json=register_data)

            if response.status_code != 201:
                error_detail = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_detail}')
            else:
                new_user = response.json()
                await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à id: {new_user['id']}, –≤–∞—à –Ω–∏–∫: {new_user['username']}')
        except httpx.RequestError:
            await message.answer('–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
    await state.clear()


@router.message(F.text == '–í–æ–π—Ç–∏')
async def start_login(message: types.Message, state: FSMContext):
    await message.answer('–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫: ')

    await state.set_state(LoginStates.waiting_for_username)


@router.message(LoginStates.waiting_for_username)
async def login_username_handler(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text)

    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:')

    await state.set_state(LoginStates.waiting_for_password)


@router.message(LoginStates.waiting_for_password)
async def login_password_handler(message: types.Message, state: FSMContext):
    
    user_data = await state.get_data()
    username = user_data.get('username')
    password = message.text

    login_data = {
        'username': username,
        'password': password
    }

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(f'{API_BASE_URL}/token', data=login_data)

            if response.status_code != 200:
                error_detail = response.json().get('detail', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∏–∫ –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
                await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_detail}')
                return
            
            token_data = response.json()
            access_token = token_data.get('access_token')
            user_id = message.from_user.id
            users_token[user_id] = access_token

            await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!')
        except httpx.RequestError:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.')
    await state.clear()


@router.message(F.text == '–ü–æ—Å—Ç—ã')
async def get_posts_handler(message: types.Message, state: FSMContext):

    await message.answer('–ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å—Ç—ã')

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f'{API_BASE_URL}/posts')

            response.raise_for_status()

            posts = response.json()

            if not posts:
                await message.answer('–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ –ø–æ—Å—Ç–∞.')
                return
            
            for post in posts:

                text = (
                    f'üìÑ *{post['title']}*\n\n'
                    f'{post['content']}\n\n'
                    f'–ê–≤—Ç–æ—Ä: {post['owner']['username']} | {post['created_at']}'
                )

                likes_count = post.get('likes_count', 0)
                post_id = post['id']        

                await message.answer(text=text, parse_mode='Markdown', reply_markup=get_inline_kb(post_id=post_id, current_likes=likes_count))
        except httpx.HTTPStatusError as e:
            await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤: {e.response.status_code}')
        except httpx.RequestError:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É')


@router.callback_query(F.data.startswith('like_'))
async def like_handler(callback: types.CallbackQuery):

    access_token = users_token.get(callback.from_user.id)

    if not access_token:
        await callback.answer('–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫!', show_alert=True)
        return
    
    post_id = int(callback.data.split('_')[1])

    headers = {
        'Authorization': f'Bearer {access_token}'
    }
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(f'{API_BASE_URL}/post/{post_id}/like', headers=headers)

            if response.status_code == 401:
                await callback.answer('–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞!', show_alert=True)
                return

            if response.status_code != 200:
                error_detail = response.json().get('detail', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ –ø–æ—Å—Ç–∞')
                await callback.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_detail}', show_alert=True)
                return
            
            get_response = await client.get(f'{API_BASE_URL}/posts')
            get_response.raise_for_status
            posts = get_response.json()

            post_to_update = next((p for p in posts if p['id'] == post_id))

            if post_to_update:

                new_kb = get_inline_kb(post_id=post_id, current_likes=post_to_update.get('likes_count', 0))

                await callback.message.edit_reply_markup(reply_markup=new_kb)
                
                await callback.answer(text=response.json().get('detail'))
        except httpx.RequestError:
            await callback.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.', show_alert=True)
    await callback.answer(f'–í—ã –ª–∞–π–∫–Ω—É–ª–∏ –ø–æ—Å—Ç ‚Ññ{post_id}', show_alert=True)    


@router.message(F.text == '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç')
async def create_post_handler(message: types.Message, state: FSMContext):
    await message.answer('–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç! –í–≤–µ–¥–∏—Ç–µ —Ç–∏—Ç–ª –¥–ª—è –ø–æ—Å—Ç–∞:')

    await state.set_state(CreatePostStates.waiting_for_title)


@router.message(CreatePostStates.waiting_for_title)
async def title_handler(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)

    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞:')

    await state.set_state(CreatePostStates.waiting_for_content)


@router.message(CreatePostStates.waiting_for_content)
async def content_handler(message: types.Message, state: FSMContext):

    user_id = message.from_user.id
    access_token = users_token.get(user_id)

    if not access_token:
        await message.answer('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!')
        await state.clear()
        return

    post_data = await state.get_data()
    title = post_data.get('title')
    content = message.text

    post_data = {
        'title': title,
        'content': content
    }

    headers = {
        'Authorization': f'Bearer {access_token}'
    }

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(f'{API_BASE_URL}/posts', json=post_data, headers=headers)

            if response.status_code == 401:
                await message.answer('–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞!')
                return
            elif response.status_code != 201:
                error_detail = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!')
                await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_detail}')
            else:
                new_post = response.json()
                await message.answer(f'–í–∞—à –ø–æ—Å—Ç {new_post['title']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
        except httpx.RequestError:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.')
    await state.clear()


@router.message()
async def echo_handler(message: types.Message):
    await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')


async def main():
    bot = Bot(BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)

    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())