import httpx
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from ..keyboards.inline_kb import get_inline_kb
from ..core.config import settings
from .auth_handlers import users_token


API_BASE_URL = settings.api_base_url

class CreatePostStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_content = State()


class UpdatePostStates(StatesGroup):
    waiting_for_new_title = State()
    waiting_for_new_content = State()


router = Router()


# ---GET POSTS BLOCK---
@router.message(F.text == '–ü–æ—Å—Ç—ã')
async def get_posts_handler(message: types.Message, state: FSMContext):

    await message.answer('–ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å—Ç—ã')

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f'{API_BASE_URL}/posts')

            response.raise_for_status()

            posts = response.json()

            if not posts:
                await message.answer('–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ –ø–æ—Å—Ç–∞.')
                return
            
            for post in posts:

                text = (
                    f'üìÑ *{post['title']}*\n\n'
                    f'{post['content']}\n\n'
                    f'–ê–≤—Ç–æ—Ä: {post['owner']['username']} | {post['created_at']}'
                )
                
                post_id = post['id'] 
                likes_count = post.get('likes_count', 0)       

                await message.answer(text=text, parse_mode='Markdown', reply_markup=get_inline_kb(post_id=post_id, current_likes=likes_count))
        except httpx.HTTPStatusError as e:
            await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤: {e.response.status_code}')
        except httpx.RequestError:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É')


# ---LIKE HANDLER BLOCK---
@router.callback_query(F.data.startswith('like_'))
async def like_handler(callback: types.CallbackQuery):

    access_token = users_token.get(callback.from_user.id)

    if not access_token:
        await callback.answer('–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫!', show_alert=True)
        return
    
    post_id = int(callback.data.split('_')[1])

    headers = {
        'Authorization': f'Bearer {access_token}'
    }
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(f'{API_BASE_URL}/post/{post_id}/like', headers=headers)

            if response.status_code == 401:
                await callback.answer('–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞!', show_alert=True)
                return

            if response.status_code != 200:
                error_detail = response.json().get('detail', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ –ø–æ—Å—Ç–∞')
                await callback.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_detail}', show_alert=True)
                return
            
            get_response = await client.get(f'{API_BASE_URL}/posts')
            get_response.raise_for_status
            posts = get_response.json()

            post_to_update = next((p for p in posts if p['id'] == post_id))

            if post_to_update:

                new_kb = get_inline_kb(post_id=post_id, current_likes=post_to_update.get('likes_count', 0))

                await callback.message.edit_reply_markup(reply_markup=new_kb)
                
                await callback.answer(text=response.json().get('detail'), show_alert=False)
        except httpx.RequestError:
            await callback.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.', show_alert=True)


# ---EDIT POST HANDLER BLOCK---
@router.callback_query(F.data.startswith('update_'))
async def update_post_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    post_id = int(callback.data.split('_')[1])

    await state.update_data(post_id=post_id)

    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:')
    await state.set_state(UpdatePostStates.waiting_for_new_title)


@router.message(UpdatePostStates.waiting_for_new_title)
async def update_title_handler(message: types.Message, state: FSMContext):

    await state.update_data(title=message.text)

    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞:')

    await state.set_state(UpdatePostStates.waiting_for_new_content)


@router.message(UpdatePostStates.waiting_for_new_content)
async def update_content_handler(message: types.Message, state: FSMContext):

    update_post_data = await state.get_data()
    post_id = update_post_data.get('post_id')
    title = update_post_data.get('title')
    content = message.text

    user_id = message.from_user.id
    access_token = users_token.get(user_id)

    if not access_token:
        await message.answer('–ß—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!')
        return
    
    post_data = {
        'title': title,
        'content': content
    }

    headers = {
        'Authorization': f'Bearer {access_token}'
    }

    async with httpx.AsyncClient() as client:
        try:
            response = await client.put(f'{API_BASE_URL}/post/{post_id}', json=post_data, headers=headers)

            if response.status_code == 401:
                await message.answer('–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞!')
                state.clear()
                return
            if response.status_code != 200:
                error_detail = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!')
                await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_detail}')
                state.clear()
                return

            post = response.json()

            await message.answer(f'–í–∞—à –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!')

            state.clear()
        except httpx.RequestError:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.')
            state.clear()


# ---DELETE POST HANDLER BLOCK---
@router.callback_query(F.data.startswith('delete_'))
async def delete_post_handler(callback: types.CallbackQuery):
    
    user_id = callback.from_user.id

    access_token = users_token.get(user_id)

    if not access_token:
        await callback.message.answer('–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!')
        return
    
    post_id = int(callback.data.split('_')[1])

    headers = {
        'Authorization': f'Bearer {access_token}'
    }

    async with httpx.AsyncClient() as client:
        try:
            response = await client.delete(f'{API_BASE_URL}/post/{post_id}', headers=headers)

            if response.status_code == 401:
                await callback.message.answer('–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞!')
                return
            
            if response.status_code != 200:
                error_detail = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!')
                await callback.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_detail}')
                return
            
            await callback.answer(f'–ü–æ—Å—Ç ‚Ññ{post_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', show_alert=False)
        except httpx.RequestError:
            await callback.message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.')


# ---CREATE POST BLOCK---
@router.message(F.text == '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç')
async def create_post_handler(message: types.Message, state: FSMContext):
    await message.answer('–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç! –í–≤–µ–¥–∏—Ç–µ —Ç–∏—Ç–ª –¥–ª—è –ø–æ—Å—Ç–∞:')

    await state.set_state(CreatePostStates.waiting_for_title)


@router.message(CreatePostStates.waiting_for_title)
async def title_handler(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)

    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞:')

    await state.set_state(CreatePostStates.waiting_for_content)


@router.message(CreatePostStates.waiting_for_content)
async def content_handler(message: types.Message, state: FSMContext):

    user_id = message.from_user.id
    access_token = users_token.get(user_id)

    if not access_token:
        await message.answer('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!')
        await state.clear()
        return

    post_data = await state.get_data()
    title = post_data.get('title')
    content = message.text

    post_data = {
        'title': title,
        'content': content
    }

    headers = {
        'Authorization': f'Bearer {access_token}'
    }

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(f'{API_BASE_URL}/posts', json=post_data, headers=headers)

            if response.status_code == 401:
                await message.answer('–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞!')
                return
            elif response.status_code != 201:
                error_detail = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!')
                await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_detail}')
            else:
                new_post = response.json()
                await message.answer(f'–í–∞—à –ø–æ—Å—Ç {new_post['title']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
        except httpx.RequestError:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.')
    await state.clear()